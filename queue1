#Setup Cell
from matplotlib import cm
import numpy as np
import random
from matplotlib import pyplot as plt

########################

def value_generator(p_leave):
    return random.uniform(0, 1)>p_leave
def get_frequency(sample,target_value):
    try:
        len(np.shape(sample))
        counter=0
        for row in sample:
            counter =counter + row.count(target_value)
            frequency=counter/np.size(sample)
        return frequency
    except:
        frequency=sample.count(target_value)/len(sample)
        return frequency
def queue_simulator(q_length:int,p_leave:float,people_memorized:int):
    people_messing=0
    for _ in range(q_length):

        state=value_generator(p_leave)
        if state:
            people_messing=0
        
        else:
            people_messing+=1
        

        if people_messing >= people_memorized:
            return 'failed'

    return 'success'
def batch_simulation(sim,*sim_args):
    batch=[]
    for _ in range(400):
        batch.append(sim(*sim_args))

    return batch

def frq_of_batch(N,p,m):
    batch=batch_simulation(queue_simulator,N,p,m)
    return get_frequency(batch,'failed')

###############################

N=20
p0=[0.01,0.05,0.1,0.2]
p=np.linspace(0.01,0.5,100)
m=[1,2,3,4,5]
# m=np.linspace(1,5,100)
M,P=np.meshgrid(m,p)
f=[]
for i in range(len(p)):
    c=[]
    for j in range(len(m)):
        c.append(frq_of_batch(N,P[i][j],M[i][j]))
    f.append(c)
F=np.array(f)


#############################

fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
surf = ax.plot_surface(M, P, F, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)



ax.set_xlabel('Num of People seen')
ax.set_ylabel('leaving probability')

# Add a color bar which maps values to colors.
fig.colorbar(surf, shrink=0.5, aspect=5)

plt.show()
